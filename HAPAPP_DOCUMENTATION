HAPAPP DOCUMENTATION
--------------------
This is the documentation for HapApp as a system. Whenever we add new work to the app, we should update this file so that our expected interface is clear and available to everyone else.

-----------------------------
ROUTES
-----------------------------
Here are all the working routes in the app.
Format:
URL -- CONTROLLER#ACTION
Description.

/ -- users#index
This is the root page of the site. For users not logged in, it redirects to the login page. Otherwise, it displays the landing page.


-----------------------------
CONTROLLERS
-----------------------------
Here are all the controllers for the app, and their potential actions.
Format:
CONTROLLER
----------
ACTION1: Renders / redirects to - view / url
param1 - description.
param2 - description.
action description.

ACTION2: ...

ActivitiesController
--------------------
create_activity: Renders JSON - {"hapapperror": "...", "errors": [...]} # TODO: Do you need any other things returned?
json - A json object of the parameters. It must include:
	activity_name - the name of the activity type to add.
	measurements - an array of measurement type names to associate with the activity.
This action creates a new activity associated with the current user and the specified activity type / measurement types. Currently, it returns a json object that contains "hapapperror" and "errors" if anything went wrong.

track_new_measurement: Renders JSON - {"hapapperror": "...", "errors": [...]} # TODO: Do you need any other things returned?
json - A json object of the parameters. It must include:
	activity_name - the name of the activity type to measure.
	measurements - an object containing measurement names as keys and values as values.
This action creates measurements for the specified activity and the current user. It returns json containing any errors that occurred.

search: Renders JSON # NOTE: NOT YET IMPLEMENTED
query - the activity string that we want to search for.
This method searches the database for results similar to the query and returns the most probable results.
# TODO: Specify the format of the returned JSON.

data_for_user: Renders JSON # NOTE: NOT YET IMPLEMENTED
activity_type_id - the id of the activity type we wish to search for.
user_id - the id of the user we wish to search for.
This method returns JSON representing the data associated with the user-activity_type pair. Useful for querying how well friends perform on activities you are doing.
# TODO: Sepcify the format of the returned JSON.


-----------------------------
VIEWS
-----------------------------
The views of the app.
Format:
VIEW_NAME:
param1 - description
param2 - description
view description.

-----------------------------
PARTIALS
-----------------------------
The partials that views have access to.
Format: same as views

-----------------------------
HELPERS
-----------------------------
Helper modules. By default, they are accessable by the views, but can also be accessed by the controllers if the line "include MODULE_NAME" is placed in application_controller.rb
Format:
MODULE
------
FUNCTION1:
param1 - description.
param2 - description.
function description.

FUNCTION2: ...

SessionsHelper
--------------
sign_in:
user - The User (model) object representing the user we wish to sign in.
This method signs in the user, and stores a permanent cookie representing this fact.

sign_out:
This method signs out the current user by invalidating the browser's cookie.

current_user:
This method represents the currently logged in user, and can be get and set like a variable. The first time it's called per page, it makes a database query using the browser cookie, but it caches the result for subsequent calls.